openapi: 3.0.0
info:
  title: Petstore API
  version: 1.0.0
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI specification

servers:
  - url: https://petstore.swagger.io/v1
    description: Production server
  - url: https://petstore.swagger.io/sandbox
    description: Sandbox server

paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      parameters:
        - $ref: '#/components/parameters/ApiKey'
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          schema:
            type: integer
            format: int32
            maximum: 100
            default: 20
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      summary: Create a pet
      operationId: createPet
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  
  /pets/{petId}:
    parameters:
      - $ref: '#/components/parameters/PetId'
    get:
      summary: Get pet by ID
      operationId: getPetById
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update pet
      operationId: updatePet
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          $ref: '#/paths/~1pets~1{petId}/get/responses/200'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /pets/{petId}/category:
    parameters:
      - $ref: '#/paths/~1pets~1{petId}/parameters'
    get:
      summary: Get pet's category
      operationId: getPetCategory
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'

  /store/orders:
    post:
      summary: Place a new order
      operationId: placeOrder
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /store/orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get order by ID
      operationId: getOrderById
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        parent:
          $ref: '#/components/schemas/Category'  # Circular reference example
    
    Status:
      type: string
      enum:
        - available
        - pending
        - sold

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Order:
      type: object
      required:
        - id
        - petId
        - quantity
        - status
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          minimum: 1
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - placed
            - approved
            - delivered
            - cancelled
        pet:
          $ref: '#/components/schemas/Pet'

  parameters:
    ApiKey:
      name: api_key
      in: header
      required: true
      schema:
        type: string
    
    PetId:
      name: petId
      in: path
      required: true
      schema:
        type: integer
        format: int64

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api_key

security:
  - ApiKeyAuth: [] 